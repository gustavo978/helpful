/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "SimpleSwitch.h"

namespace sswitch_runtime {


SimpleSwitch_mirroring_mapping_add_args::~SimpleSwitch_mirroring_mapping_add_args() throw() {
}


uint32_t SimpleSwitch_mirroring_mapping_add_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mirror_id);
          this->__isset.mirror_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->egress_port);
          this->__isset.egress_port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_mirroring_mapping_add_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_mirroring_mapping_add_args");

  xfer += oprot->writeFieldBegin("mirror_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->mirror_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("egress_port", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->egress_port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_mirroring_mapping_add_pargs::~SimpleSwitch_mirroring_mapping_add_pargs() throw() {
}


uint32_t SimpleSwitch_mirroring_mapping_add_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_mirroring_mapping_add_pargs");

  xfer += oprot->writeFieldBegin("mirror_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->mirror_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("egress_port", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->egress_port)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_mirroring_mapping_add_result::~SimpleSwitch_mirroring_mapping_add_result() throw() {
}


uint32_t SimpleSwitch_mirroring_mapping_add_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_mirroring_mapping_add_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SimpleSwitch_mirroring_mapping_add_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SimpleSwitch_mirroring_mapping_add_presult::~SimpleSwitch_mirroring_mapping_add_presult() throw() {
}


uint32_t SimpleSwitch_mirroring_mapping_add_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


SimpleSwitch_mirroring_mapping_delete_args::~SimpleSwitch_mirroring_mapping_delete_args() throw() {
}


uint32_t SimpleSwitch_mirroring_mapping_delete_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mirror_id);
          this->__isset.mirror_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_mirroring_mapping_delete_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_mirroring_mapping_delete_args");

  xfer += oprot->writeFieldBegin("mirror_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->mirror_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_mirroring_mapping_delete_pargs::~SimpleSwitch_mirroring_mapping_delete_pargs() throw() {
}


uint32_t SimpleSwitch_mirroring_mapping_delete_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_mirroring_mapping_delete_pargs");

  xfer += oprot->writeFieldBegin("mirror_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->mirror_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_mirroring_mapping_delete_result::~SimpleSwitch_mirroring_mapping_delete_result() throw() {
}


uint32_t SimpleSwitch_mirroring_mapping_delete_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_mirroring_mapping_delete_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SimpleSwitch_mirroring_mapping_delete_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SimpleSwitch_mirroring_mapping_delete_presult::~SimpleSwitch_mirroring_mapping_delete_presult() throw() {
}


uint32_t SimpleSwitch_mirroring_mapping_delete_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


SimpleSwitch_mirroring_mapping_get_egress_port_args::~SimpleSwitch_mirroring_mapping_get_egress_port_args() throw() {
}


uint32_t SimpleSwitch_mirroring_mapping_get_egress_port_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mirror_id);
          this->__isset.mirror_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_mirroring_mapping_get_egress_port_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_mirroring_mapping_get_egress_port_args");

  xfer += oprot->writeFieldBegin("mirror_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->mirror_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_mirroring_mapping_get_egress_port_pargs::~SimpleSwitch_mirroring_mapping_get_egress_port_pargs() throw() {
}


uint32_t SimpleSwitch_mirroring_mapping_get_egress_port_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_mirroring_mapping_get_egress_port_pargs");

  xfer += oprot->writeFieldBegin("mirror_id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->mirror_id)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_mirroring_mapping_get_egress_port_result::~SimpleSwitch_mirroring_mapping_get_egress_port_result() throw() {
}


uint32_t SimpleSwitch_mirroring_mapping_get_egress_port_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_mirroring_mapping_get_egress_port_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SimpleSwitch_mirroring_mapping_get_egress_port_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SimpleSwitch_mirroring_mapping_get_egress_port_presult::~SimpleSwitch_mirroring_mapping_get_egress_port_presult() throw() {
}


uint32_t SimpleSwitch_mirroring_mapping_get_egress_port_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


SimpleSwitch_set_egress_queue_depth_args::~SimpleSwitch_set_egress_queue_depth_args() throw() {
}


uint32_t SimpleSwitch_set_egress_queue_depth_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port_num);
          this->__isset.port_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->depth_pkts);
          this->__isset.depth_pkts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_set_egress_queue_depth_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_set_egress_queue_depth_args");

  xfer += oprot->writeFieldBegin("port_num", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->port_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("depth_pkts", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->depth_pkts);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_set_egress_queue_depth_pargs::~SimpleSwitch_set_egress_queue_depth_pargs() throw() {
}


uint32_t SimpleSwitch_set_egress_queue_depth_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_set_egress_queue_depth_pargs");

  xfer += oprot->writeFieldBegin("port_num", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->port_num)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("depth_pkts", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((*(this->depth_pkts)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_set_egress_queue_depth_result::~SimpleSwitch_set_egress_queue_depth_result() throw() {
}


uint32_t SimpleSwitch_set_egress_queue_depth_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_set_egress_queue_depth_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SimpleSwitch_set_egress_queue_depth_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SimpleSwitch_set_egress_queue_depth_presult::~SimpleSwitch_set_egress_queue_depth_presult() throw() {
}


uint32_t SimpleSwitch_set_egress_queue_depth_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


SimpleSwitch_set_all_egress_queue_depths_args::~SimpleSwitch_set_all_egress_queue_depths_args() throw() {
}


uint32_t SimpleSwitch_set_all_egress_queue_depths_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->depth_pkts);
          this->__isset.depth_pkts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_set_all_egress_queue_depths_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_set_all_egress_queue_depths_args");

  xfer += oprot->writeFieldBegin("depth_pkts", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->depth_pkts);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_set_all_egress_queue_depths_pargs::~SimpleSwitch_set_all_egress_queue_depths_pargs() throw() {
}


uint32_t SimpleSwitch_set_all_egress_queue_depths_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_set_all_egress_queue_depths_pargs");

  xfer += oprot->writeFieldBegin("depth_pkts", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->depth_pkts)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_set_all_egress_queue_depths_result::~SimpleSwitch_set_all_egress_queue_depths_result() throw() {
}


uint32_t SimpleSwitch_set_all_egress_queue_depths_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_set_all_egress_queue_depths_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SimpleSwitch_set_all_egress_queue_depths_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SimpleSwitch_set_all_egress_queue_depths_presult::~SimpleSwitch_set_all_egress_queue_depths_presult() throw() {
}


uint32_t SimpleSwitch_set_all_egress_queue_depths_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


SimpleSwitch_set_egress_queue_rate_args::~SimpleSwitch_set_egress_queue_rate_args() throw() {
}


uint32_t SimpleSwitch_set_egress_queue_rate_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port_num);
          this->__isset.port_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rate_pps);
          this->__isset.rate_pps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_set_egress_queue_rate_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_set_egress_queue_rate_args");

  xfer += oprot->writeFieldBegin("port_num", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->port_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rate_pps", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->rate_pps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_set_egress_queue_rate_pargs::~SimpleSwitch_set_egress_queue_rate_pargs() throw() {
}


uint32_t SimpleSwitch_set_egress_queue_rate_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_set_egress_queue_rate_pargs");

  xfer += oprot->writeFieldBegin("port_num", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->port_num)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rate_pps", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64((*(this->rate_pps)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_set_egress_queue_rate_result::~SimpleSwitch_set_egress_queue_rate_result() throw() {
}


uint32_t SimpleSwitch_set_egress_queue_rate_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_set_egress_queue_rate_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SimpleSwitch_set_egress_queue_rate_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SimpleSwitch_set_egress_queue_rate_presult::~SimpleSwitch_set_egress_queue_rate_presult() throw() {
}


uint32_t SimpleSwitch_set_egress_queue_rate_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


SimpleSwitch_set_all_egress_queue_rates_args::~SimpleSwitch_set_all_egress_queue_rates_args() throw() {
}


uint32_t SimpleSwitch_set_all_egress_queue_rates_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->rate_pps);
          this->__isset.rate_pps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_set_all_egress_queue_rates_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_set_all_egress_queue_rates_args");

  xfer += oprot->writeFieldBegin("rate_pps", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->rate_pps);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_set_all_egress_queue_rates_pargs::~SimpleSwitch_set_all_egress_queue_rates_pargs() throw() {
}


uint32_t SimpleSwitch_set_all_egress_queue_rates_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_set_all_egress_queue_rates_pargs");

  xfer += oprot->writeFieldBegin("rate_pps", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->rate_pps)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_set_all_egress_queue_rates_result::~SimpleSwitch_set_all_egress_queue_rates_result() throw() {
}


uint32_t SimpleSwitch_set_all_egress_queue_rates_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_set_all_egress_queue_rates_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SimpleSwitch_set_all_egress_queue_rates_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SimpleSwitch_set_all_egress_queue_rates_presult::~SimpleSwitch_set_all_egress_queue_rates_presult() throw() {
}


uint32_t SimpleSwitch_set_all_egress_queue_rates_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


SimpleSwitch_get_time_elapsed_us_args::~SimpleSwitch_get_time_elapsed_us_args() throw() {
}


uint32_t SimpleSwitch_get_time_elapsed_us_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_get_time_elapsed_us_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_get_time_elapsed_us_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_get_time_elapsed_us_pargs::~SimpleSwitch_get_time_elapsed_us_pargs() throw() {
}


uint32_t SimpleSwitch_get_time_elapsed_us_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_get_time_elapsed_us_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_get_time_elapsed_us_result::~SimpleSwitch_get_time_elapsed_us_result() throw() {
}


uint32_t SimpleSwitch_get_time_elapsed_us_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_get_time_elapsed_us_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SimpleSwitch_get_time_elapsed_us_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SimpleSwitch_get_time_elapsed_us_presult::~SimpleSwitch_get_time_elapsed_us_presult() throw() {
}


uint32_t SimpleSwitch_get_time_elapsed_us_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}


SimpleSwitch_get_time_since_epoch_us_args::~SimpleSwitch_get_time_since_epoch_us_args() throw() {
}


uint32_t SimpleSwitch_get_time_since_epoch_us_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_get_time_since_epoch_us_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_get_time_since_epoch_us_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_get_time_since_epoch_us_pargs::~SimpleSwitch_get_time_since_epoch_us_pargs() throw() {
}


uint32_t SimpleSwitch_get_time_since_epoch_us_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SimpleSwitch_get_time_since_epoch_us_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}


SimpleSwitch_get_time_since_epoch_us_result::~SimpleSwitch_get_time_since_epoch_us_result() throw() {
}


uint32_t SimpleSwitch_get_time_since_epoch_us_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->success);
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleSwitch_get_time_since_epoch_us_result::write(::apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("SimpleSwitch_get_time_since_epoch_us_result");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_I64, 0);
    xfer += oprot->writeI64(this->success);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


SimpleSwitch_get_time_since_epoch_us_presult::~SimpleSwitch_get_time_since_epoch_us_presult() throw() {
}


uint32_t SimpleSwitch_get_time_since_epoch_us_presult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

int32_t SimpleSwitchClient::mirroring_mapping_add(const int32_t mirror_id, const int32_t egress_port)
{
  send_mirroring_mapping_add(mirror_id, egress_port);
  return recv_mirroring_mapping_add();
}

void SimpleSwitchClient::send_mirroring_mapping_add(const int32_t mirror_id, const int32_t egress_port)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("mirroring_mapping_add", ::apache::thrift::protocol::T_CALL, cseqid);

  SimpleSwitch_mirroring_mapping_add_pargs args;
  args.mirror_id = &mirror_id;
  args.egress_port = &egress_port;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t SimpleSwitchClient::recv_mirroring_mapping_add()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("mirroring_mapping_add") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  SimpleSwitch_mirroring_mapping_add_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "mirroring_mapping_add failed: unknown result");
}

int32_t SimpleSwitchClient::mirroring_mapping_delete(const int32_t mirror_id)
{
  send_mirroring_mapping_delete(mirror_id);
  return recv_mirroring_mapping_delete();
}

void SimpleSwitchClient::send_mirroring_mapping_delete(const int32_t mirror_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("mirroring_mapping_delete", ::apache::thrift::protocol::T_CALL, cseqid);

  SimpleSwitch_mirroring_mapping_delete_pargs args;
  args.mirror_id = &mirror_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t SimpleSwitchClient::recv_mirroring_mapping_delete()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("mirroring_mapping_delete") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  SimpleSwitch_mirroring_mapping_delete_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "mirroring_mapping_delete failed: unknown result");
}

int32_t SimpleSwitchClient::mirroring_mapping_get_egress_port(const int32_t mirror_id)
{
  send_mirroring_mapping_get_egress_port(mirror_id);
  return recv_mirroring_mapping_get_egress_port();
}

void SimpleSwitchClient::send_mirroring_mapping_get_egress_port(const int32_t mirror_id)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("mirroring_mapping_get_egress_port", ::apache::thrift::protocol::T_CALL, cseqid);

  SimpleSwitch_mirroring_mapping_get_egress_port_pargs args;
  args.mirror_id = &mirror_id;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t SimpleSwitchClient::recv_mirroring_mapping_get_egress_port()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("mirroring_mapping_get_egress_port") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  SimpleSwitch_mirroring_mapping_get_egress_port_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "mirroring_mapping_get_egress_port failed: unknown result");
}

int32_t SimpleSwitchClient::set_egress_queue_depth(const int32_t port_num, const int32_t depth_pkts)
{
  send_set_egress_queue_depth(port_num, depth_pkts);
  return recv_set_egress_queue_depth();
}

void SimpleSwitchClient::send_set_egress_queue_depth(const int32_t port_num, const int32_t depth_pkts)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("set_egress_queue_depth", ::apache::thrift::protocol::T_CALL, cseqid);

  SimpleSwitch_set_egress_queue_depth_pargs args;
  args.port_num = &port_num;
  args.depth_pkts = &depth_pkts;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t SimpleSwitchClient::recv_set_egress_queue_depth()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("set_egress_queue_depth") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  SimpleSwitch_set_egress_queue_depth_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "set_egress_queue_depth failed: unknown result");
}

int32_t SimpleSwitchClient::set_all_egress_queue_depths(const int32_t depth_pkts)
{
  send_set_all_egress_queue_depths(depth_pkts);
  return recv_set_all_egress_queue_depths();
}

void SimpleSwitchClient::send_set_all_egress_queue_depths(const int32_t depth_pkts)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("set_all_egress_queue_depths", ::apache::thrift::protocol::T_CALL, cseqid);

  SimpleSwitch_set_all_egress_queue_depths_pargs args;
  args.depth_pkts = &depth_pkts;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t SimpleSwitchClient::recv_set_all_egress_queue_depths()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("set_all_egress_queue_depths") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  SimpleSwitch_set_all_egress_queue_depths_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "set_all_egress_queue_depths failed: unknown result");
}

int32_t SimpleSwitchClient::set_egress_queue_rate(const int32_t port_num, const int64_t rate_pps)
{
  send_set_egress_queue_rate(port_num, rate_pps);
  return recv_set_egress_queue_rate();
}

void SimpleSwitchClient::send_set_egress_queue_rate(const int32_t port_num, const int64_t rate_pps)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("set_egress_queue_rate", ::apache::thrift::protocol::T_CALL, cseqid);

  SimpleSwitch_set_egress_queue_rate_pargs args;
  args.port_num = &port_num;
  args.rate_pps = &rate_pps;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t SimpleSwitchClient::recv_set_egress_queue_rate()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("set_egress_queue_rate") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  SimpleSwitch_set_egress_queue_rate_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "set_egress_queue_rate failed: unknown result");
}

int32_t SimpleSwitchClient::set_all_egress_queue_rates(const int64_t rate_pps)
{
  send_set_all_egress_queue_rates(rate_pps);
  return recv_set_all_egress_queue_rates();
}

void SimpleSwitchClient::send_set_all_egress_queue_rates(const int64_t rate_pps)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("set_all_egress_queue_rates", ::apache::thrift::protocol::T_CALL, cseqid);

  SimpleSwitch_set_all_egress_queue_rates_pargs args;
  args.rate_pps = &rate_pps;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int32_t SimpleSwitchClient::recv_set_all_egress_queue_rates()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("set_all_egress_queue_rates") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int32_t _return;
  SimpleSwitch_set_all_egress_queue_rates_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "set_all_egress_queue_rates failed: unknown result");
}

int64_t SimpleSwitchClient::get_time_elapsed_us()
{
  send_get_time_elapsed_us();
  return recv_get_time_elapsed_us();
}

void SimpleSwitchClient::send_get_time_elapsed_us()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("get_time_elapsed_us", ::apache::thrift::protocol::T_CALL, cseqid);

  SimpleSwitch_get_time_elapsed_us_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int64_t SimpleSwitchClient::recv_get_time_elapsed_us()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("get_time_elapsed_us") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int64_t _return;
  SimpleSwitch_get_time_elapsed_us_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_time_elapsed_us failed: unknown result");
}

int64_t SimpleSwitchClient::get_time_since_epoch_us()
{
  send_get_time_since_epoch_us();
  return recv_get_time_since_epoch_us();
}

void SimpleSwitchClient::send_get_time_since_epoch_us()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("get_time_since_epoch_us", ::apache::thrift::protocol::T_CALL, cseqid);

  SimpleSwitch_get_time_since_epoch_us_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

int64_t SimpleSwitchClient::recv_get_time_since_epoch_us()
{

  int32_t rseqid = 0;
  std::string fname;
  ::apache::thrift::protocol::TMessageType mtype;

  iprot_->readMessageBegin(fname, mtype, rseqid);
  if (mtype == ::apache::thrift::protocol::T_EXCEPTION) {
    ::apache::thrift::TApplicationException x;
    x.read(iprot_);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
    throw x;
  }
  if (mtype != ::apache::thrift::protocol::T_REPLY) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  if (fname.compare("get_time_since_epoch_us") != 0) {
    iprot_->skip(::apache::thrift::protocol::T_STRUCT);
    iprot_->readMessageEnd();
    iprot_->getTransport()->readEnd();
  }
  int64_t _return;
  SimpleSwitch_get_time_since_epoch_us_presult result;
  result.success = &_return;
  result.read(iprot_);
  iprot_->readMessageEnd();
  iprot_->getTransport()->readEnd();

  if (result.__isset.success) {
    return _return;
  }
  throw ::apache::thrift::TApplicationException(::apache::thrift::TApplicationException::MISSING_RESULT, "get_time_since_epoch_us failed: unknown result");
}

bool SimpleSwitchProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void SimpleSwitchProcessor::process_mirroring_mapping_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SimpleSwitch.mirroring_mapping_add", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SimpleSwitch.mirroring_mapping_add");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SimpleSwitch.mirroring_mapping_add");
  }

  SimpleSwitch_mirroring_mapping_add_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SimpleSwitch.mirroring_mapping_add", bytes);
  }

  SimpleSwitch_mirroring_mapping_add_result result;
  try {
    result.success = iface_->mirroring_mapping_add(args.mirror_id, args.egress_port);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SimpleSwitch.mirroring_mapping_add");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("mirroring_mapping_add", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SimpleSwitch.mirroring_mapping_add");
  }

  oprot->writeMessageBegin("mirroring_mapping_add", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SimpleSwitch.mirroring_mapping_add", bytes);
  }
}

void SimpleSwitchProcessor::process_mirroring_mapping_delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SimpleSwitch.mirroring_mapping_delete", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SimpleSwitch.mirroring_mapping_delete");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SimpleSwitch.mirroring_mapping_delete");
  }

  SimpleSwitch_mirroring_mapping_delete_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SimpleSwitch.mirroring_mapping_delete", bytes);
  }

  SimpleSwitch_mirroring_mapping_delete_result result;
  try {
    result.success = iface_->mirroring_mapping_delete(args.mirror_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SimpleSwitch.mirroring_mapping_delete");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("mirroring_mapping_delete", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SimpleSwitch.mirroring_mapping_delete");
  }

  oprot->writeMessageBegin("mirroring_mapping_delete", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SimpleSwitch.mirroring_mapping_delete", bytes);
  }
}

void SimpleSwitchProcessor::process_mirroring_mapping_get_egress_port(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SimpleSwitch.mirroring_mapping_get_egress_port", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SimpleSwitch.mirroring_mapping_get_egress_port");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SimpleSwitch.mirroring_mapping_get_egress_port");
  }

  SimpleSwitch_mirroring_mapping_get_egress_port_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SimpleSwitch.mirroring_mapping_get_egress_port", bytes);
  }

  SimpleSwitch_mirroring_mapping_get_egress_port_result result;
  try {
    result.success = iface_->mirroring_mapping_get_egress_port(args.mirror_id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SimpleSwitch.mirroring_mapping_get_egress_port");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("mirroring_mapping_get_egress_port", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SimpleSwitch.mirroring_mapping_get_egress_port");
  }

  oprot->writeMessageBegin("mirroring_mapping_get_egress_port", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SimpleSwitch.mirroring_mapping_get_egress_port", bytes);
  }
}

void SimpleSwitchProcessor::process_set_egress_queue_depth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SimpleSwitch.set_egress_queue_depth", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SimpleSwitch.set_egress_queue_depth");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SimpleSwitch.set_egress_queue_depth");
  }

  SimpleSwitch_set_egress_queue_depth_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SimpleSwitch.set_egress_queue_depth", bytes);
  }

  SimpleSwitch_set_egress_queue_depth_result result;
  try {
    result.success = iface_->set_egress_queue_depth(args.port_num, args.depth_pkts);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SimpleSwitch.set_egress_queue_depth");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("set_egress_queue_depth", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SimpleSwitch.set_egress_queue_depth");
  }

  oprot->writeMessageBegin("set_egress_queue_depth", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SimpleSwitch.set_egress_queue_depth", bytes);
  }
}

void SimpleSwitchProcessor::process_set_all_egress_queue_depths(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SimpleSwitch.set_all_egress_queue_depths", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SimpleSwitch.set_all_egress_queue_depths");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SimpleSwitch.set_all_egress_queue_depths");
  }

  SimpleSwitch_set_all_egress_queue_depths_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SimpleSwitch.set_all_egress_queue_depths", bytes);
  }

  SimpleSwitch_set_all_egress_queue_depths_result result;
  try {
    result.success = iface_->set_all_egress_queue_depths(args.depth_pkts);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SimpleSwitch.set_all_egress_queue_depths");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("set_all_egress_queue_depths", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SimpleSwitch.set_all_egress_queue_depths");
  }

  oprot->writeMessageBegin("set_all_egress_queue_depths", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SimpleSwitch.set_all_egress_queue_depths", bytes);
  }
}

void SimpleSwitchProcessor::process_set_egress_queue_rate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SimpleSwitch.set_egress_queue_rate", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SimpleSwitch.set_egress_queue_rate");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SimpleSwitch.set_egress_queue_rate");
  }

  SimpleSwitch_set_egress_queue_rate_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SimpleSwitch.set_egress_queue_rate", bytes);
  }

  SimpleSwitch_set_egress_queue_rate_result result;
  try {
    result.success = iface_->set_egress_queue_rate(args.port_num, args.rate_pps);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SimpleSwitch.set_egress_queue_rate");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("set_egress_queue_rate", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SimpleSwitch.set_egress_queue_rate");
  }

  oprot->writeMessageBegin("set_egress_queue_rate", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SimpleSwitch.set_egress_queue_rate", bytes);
  }
}

void SimpleSwitchProcessor::process_set_all_egress_queue_rates(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SimpleSwitch.set_all_egress_queue_rates", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SimpleSwitch.set_all_egress_queue_rates");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SimpleSwitch.set_all_egress_queue_rates");
  }

  SimpleSwitch_set_all_egress_queue_rates_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SimpleSwitch.set_all_egress_queue_rates", bytes);
  }

  SimpleSwitch_set_all_egress_queue_rates_result result;
  try {
    result.success = iface_->set_all_egress_queue_rates(args.rate_pps);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SimpleSwitch.set_all_egress_queue_rates");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("set_all_egress_queue_rates", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SimpleSwitch.set_all_egress_queue_rates");
  }

  oprot->writeMessageBegin("set_all_egress_queue_rates", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SimpleSwitch.set_all_egress_queue_rates", bytes);
  }
}

void SimpleSwitchProcessor::process_get_time_elapsed_us(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SimpleSwitch.get_time_elapsed_us", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SimpleSwitch.get_time_elapsed_us");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SimpleSwitch.get_time_elapsed_us");
  }

  SimpleSwitch_get_time_elapsed_us_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SimpleSwitch.get_time_elapsed_us", bytes);
  }

  SimpleSwitch_get_time_elapsed_us_result result;
  try {
    result.success = iface_->get_time_elapsed_us();
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SimpleSwitch.get_time_elapsed_us");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("get_time_elapsed_us", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SimpleSwitch.get_time_elapsed_us");
  }

  oprot->writeMessageBegin("get_time_elapsed_us", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SimpleSwitch.get_time_elapsed_us", bytes);
  }
}

void SimpleSwitchProcessor::process_get_time_since_epoch_us(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("SimpleSwitch.get_time_since_epoch_us", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "SimpleSwitch.get_time_since_epoch_us");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "SimpleSwitch.get_time_since_epoch_us");
  }

  SimpleSwitch_get_time_since_epoch_us_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "SimpleSwitch.get_time_since_epoch_us", bytes);
  }

  SimpleSwitch_get_time_since_epoch_us_result result;
  try {
    result.success = iface_->get_time_since_epoch_us();
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "SimpleSwitch.get_time_since_epoch_us");
    }

    ::apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("get_time_since_epoch_us", ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preWrite(ctx, "SimpleSwitch.get_time_since_epoch_us");
  }

  oprot->writeMessageBegin("get_time_since_epoch_us", ::apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postWrite(ctx, "SimpleSwitch.get_time_since_epoch_us", bytes);
  }
}

::boost::shared_ptr< ::apache::thrift::TProcessor > SimpleSwitchProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< SimpleSwitchIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< SimpleSwitchIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new SimpleSwitchProcessor(handler));
  return processor;
}
} // namespace

